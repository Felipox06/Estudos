#Aqui estou colocando em prática o conhecimento sobre a estrutura de dados de "Binary Search Trees", realizando o código após acompanhar essa vídeo aula(https://youtu.be/DlWxqU3LLpY?si=BHUM7vGcptztGyt2)
#Também decidi acrescentar alguns comentários para esclarecer a lógica.

#Aqui vamos criar a classe do Nó da Árvore, ou seja, o conjunto das funções que irão ser utilizadas nos valores para organiza-los.
class TreeNode:
    def __init__(self, value):
        self.left = None
        self.right = None
        self.value = value
    
    #A def insert irá receber o número de uma posição já existente(inicialmente a root) e de um novo valor que será inserido na árvore.
    def insert(self, value):   
        #Aqui verificamos para que lado ir e se existe espaço dísponivel nele. Caso já exista outro TreeNode, o processo é repetido com esse novo self.
        if value < self.value:
            if self.left == None:
                self.left = TreeNode(value)
            else:
                self.left.insert(value)
        else:
            if self.right == None:
                self.right = TreeNode(value)
            else:
                self.right.insert(value)


    #A def find, provavelmente a função mais útil dessa estrutura, irá verificar primeiro a direção a ser olhada(com ><) 
    #E então se existe algum valor ali, até encontrar o número(ou não).
    def find(self, value):
        if value < self.value:
            if self.left == None:
                print("Esse item não está aqui!")
            else:
                return self.left.find(value)
        elif value > self.value:
            if self.right == None:
                print("Esse item não está aqui")
            else:
                return self.right.find(value)
        else:
            print("Está aqui!")

    #A def inorder_tranversal irá navegar pela Tree em um tipo de loop até não existir mais um item na esquerda. Então, dará print onde parou, 
    #voltará para o item anterior e testará outro caminho.
    def inorder_transversal(self):
        if self.left:
            self.left.inorder_transversal()
        print(self.value)
        if self.right:
            self.right.inorder_transversal()
    #Existem as defs preorder e postorder, mas por apenas mudar a posição do print na estrutura, achei sua adição trivial.


#Estabeleço valores para testar a estrutura
tree = TreeNode(10)
tree.insert(5)
tree.insert(4)
tree.insert(2)

print(tree.left.left.value)
